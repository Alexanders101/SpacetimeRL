# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import server_pb2 as grpc__gen_dot_server__pb2


class MatchmakerStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetMatch = channel.unary_unary(
        '/Matchmaker/GetMatch',
        request_serializer=grpc__gen_dot_server__pb2.QuickMatchRequest.SerializeToString,
        response_deserializer=grpc__gen_dot_server__pb2.QuickMatchReply.FromString,
        )


class MatchmakerServicer(object):
  """The greeting service definition.
  """

  def GetMatch(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MatchmakerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetMatch': grpc.unary_unary_rpc_method_handler(
          servicer.GetMatch,
          request_deserializer=grpc__gen_dot_server__pb2.QuickMatchRequest.FromString,
          response_serializer=grpc__gen_dot_server__pb2.QuickMatchReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Matchmaker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
